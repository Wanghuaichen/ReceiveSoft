<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="reflectionImage1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAEgAAABICAYAAABV7bNHAAAABGdBTUEAALGOfPtRkwAAACBjSFJNAAB6
        JQAAgIMAAPn/AACA6QAAdTAAAOpgAAA6mAAAF2+SX8VGAAAACXBIWXMAAAsMAAALDAE/QCLIAAAABmJL
        R0QA/wD/AP+gvaeTAAAAJXRFWHRkYXRlOmNyZWF0ZQAyMDE1LTA3LTI1VDIxOjQ5OjI5KzA4OjAwt5ZB
        tAAAACV0RVh0ZGF0ZTptb2RpZnkAMjAxMS0wNS0xOVQwMDoyNjowMCswODowMOidKv0AAABOdEVYdHNv
        ZnR3YXJlAEltYWdlTWFnaWNrIDYuOC44LTEwIFExNiB4ODZfNjQgMjAxNS0wNy0xOSBodHRwOi8vd3d3
        LmltYWdlbWFnaWNrLm9yZwUMnDUAAAAYdEVYdFRodW1iOjpEb2N1bWVudDo6UGFnZXMAMaf/uy8AAAAY
        dEVYdFRodW1iOjpJbWFnZTo6SGVpZ2h0ADI1NunDRBkAAAAXdEVYdFRodW1iOjpJbWFnZTo6V2lkdGgA
        MjU2ejIURAAAABl0RVh0VGh1bWI6Ok1pbWV0eXBlAGltYWdlL3BuZz+yVk4AAAAXdEVYdFRodW1iOjpN
        VGltZQAxMzA1NzM1OTYwLlAz2AAAABN0RVh0VGh1bWI6OlNpemUAMjQuOUtCQkUc3bgAAABYdEVYdFRo
        dW1iOjpVUkkAZmlsZTovLy9ob21lL3d3d3Jvb3Qvd3d3LmVhc3lpY29uLm5ldC9jZG4taW1nLmVhc3lp
        Y29uLmNuL3NyYy81MjA1LzUyMDU0NS5wbmdD/TX4AAAWK0lEQVR4Xu2bCVjVdb7G/wcaTdNxG5tsprTm
        NtVoTd1xyq2p8ZkWnTZLDbdc02oq05tWY3dadLpMpqXmruVWbiEBCgqKqIAgsu+bLALK4oaKhOJ73/fE
        j86ce1BA8M59rjzP+3CE/zmc3+f/frff72hZ176uEbhG4BqBawSuEbhG4BqBawSalcCRI0esoqIiq6Sk
        5CfFxcVt+bhzQUHBL/Lz82/Pycm5Oysrq0d6enr35OTk7gkJCd1jY2PvPHjwYLcDBw7cHBkZ2YlqHRER
        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
        BdpVSF7RTflvDDjfG4nfzWUAAAAASUVORK5CYII=
</value>
  </data>
</root>